name: 部署 oh-name web应用

on:
  # 提交到main分支触发部署
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Deloy job
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER_NAME }}
          password: ${{ secrets.USER_PASSWORD }}
          source: './'
          target: /home/${{ secrets.USER_NAME }}/www/web-ohname/
      - name: Restore cache
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: List the state of node modules
        continue-on-error: true
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: cd /home/${{ secrets.USER_NAME }}/www/web-ohname/ && npm install && npm run lint && npm run typecheck && npm run build
      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER_NAME }}
            password: ${{ secrets.USER_PASSWORD }}
            script: |
              cd /home/${{ secrets.USER_NAME }}/www/web-ohname/
              pm2 restart "web-ohname" --time
